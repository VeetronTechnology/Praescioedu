@{
    ViewBag.Title = "School";
    var assignmentTitle = Praescio.Models.Common.ACCOUNT.AccountTypeId == (int)Praescio.BusinessEntities.Common.AccountType.SuperAdmin ? "Lesson" : "Assignment";
}

<div class="right_col" role="main" ng-controller="LoadXMLCtrl">
    <div class="">

        <div class="page-title">
            <div class="title_left">
                <a href="@Url.Action("Download", "PraescioCommon", new { filePath = @Praescio.Domain.AppCode.CommonCode.QuestionUploadFile, @class = "btn btn-primary uploadbtn" })" class="btn btn-primary uploadbtn">Download Excel Template</a>
            </div>
            <div class="title_right">
                <div class="col-md-6 col-sm-6 col-xs-12 form-group pull-right top_search">
                    <div class="input-group">
                        <ol class="breadcrumb">
                            <li><a href="@Url.Action("Dashboard", "PraescioAdmin")"><i class="fa fa-dashboard"></i> Dashboard</a></li>
                            <li class="active">School Registration</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
        <div class="row">
            <div class="col-md-12 col-xs-12">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>Upload @assignmentTitle Question</h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        <!-- start form for validation -->
                        <form id="SchoolForm" name="SchoolForm" data-parsley-validate>

                            <!--Below New Add views-->


                            <div class="form-group">
                                <label for="heard" class="required">Select Board</label>
                                <select id="Board" name="Board" ng-change="ChangeBoard(Assignment.BoardId)" class="input-sm form-control" ng-model="Assignment.BoardId" ng-options="option.Id as option.BoardName for option in BoardList" ng-required="true">
                                    <option value="">-- Select Board --</option>
                                </select>
                                <p ng-show="AssignmentForm.Board.$invalid && (AssignmentForm.Board.$dirty || submitted ||AssignmentForm.Board.$touched )" class="text-danger">Board is required.</p>
                            </div>

                            <div class="form-group">
                                <div>
                                    <label for="heard">Select Medium</label>
                                    <select id="Medium" name="Medium" class="input-sm form-control" ng-model="Assignment.MediumId" ng-disabled="Assignment.BoardId>1" ng-options="option.Id as option.Name for option in MediumList" ng-change="ChangeMedium(Assignment.MediumId)" ng-required="true">
                                        <option value="">-- Select Medium --</option>
                                    </select>
                                </div>
                                <p ng-show="AssignmentForm.Medium.$invalid && (AssignmentForm.Medium.$dirty || submitted ||AssignmentForm.Medium.$touched )" class="text-danger">Medium is required.</p>
                            </div>

                            <div class="form-group">
                                <div>
                                    <label for="heard">Select Standard</label>
                                    <select id="Standard" name="Standard" class="input-sm form-control" ng-model="Assignment.StandardId" ng-options="option.Id as option.StandardName for option in StandardList" ng-change="ChangeStandard(Assignment.StandardId)" ng-required="true">
                                        <option value="">-- Select Standard --</option>
                                    </select>
                                </div>
                                <p ng-show="AssignmentForm.Standard.$invalid && (AssignmentForm.Standard.$dirty || submitted ||AssignmentForm.Standard.$touched )" class="text-danger">Standard is required.</p>
                            </div>

                            <div class="form-group">
                                <div>
                                    <label for="heard">Select Subject</label>
                                    <select id="Subject" name="Subject" class="input-sm form-control" ng-model="Assignment.SubjectId" ng-options="option.Id as option.SubjectName for option in SubjectList" ng-change="ChangeSubject(Assignment.SubjectId)" ng-required="true">
                                        <option value="">-- Select Subject --</option>
                                    </select>
                                </div>
                                </div>
                                <div class="form-group">
                                    <label for="Version">Select @assignmentTitle</label>
                                    <select id="Assignment" name="Assignment" class="input-sm form-control" ng-model="Assignment.AssignmentId" ng-options="option.AssignmentId as option.Title for option in AssignmentList" ng-change="ChangeAssignment(Assignment.AssignmentId)" ng-required="true">
                                        <option value="">-- Select @assignmentTitle --</option>
                                    </select>
                                </div>
                                <!--Above New Add views-->

                            <div class="form-group">
                                <label for="regno">Save XML Question</label>
                                <input type="file" name="file" class="form-control" ng-files="getTheFiles($files)" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                       onchange="angular.element(this).scope().loadFile(this.files)" />
                            </div>

                            <br />
                            <span class="btn btn-primary">Reset</span>
                            <span class="btn btn-primary" ng-click="SaveXML()">Submit</span>
                        </form>
                        <!-- end form for validations -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/JSConfig.js"></script>


@section Scripts{

    <script type="text/javascript">
        myApp.directive('ngFiles', ['$parse', function ($parse) {
            function fn_link(scope, element, attrs) {
                var onChange = $parse(attrs.ngFiles);
                element.on('change', function (event) {
                    onChange(scope, { $files: event.target.files });
                });
            };

            return {
                link: fn_link
            }
        }])
        .directive('ngInitial', function () {
            return {
                restrict: 'A',
                controller: [
                  '$scope', '$element', '$attrs', '$parse', function ($scope, $element, $attrs, $parse) {
                      var getter, setter, val;
                      val = $attrs.ngInitial || $attrs.value;
                      getter = $parse($attrs.ngModel);
                      setter = getter.assign;
                      setter($scope, val);
                  }
                ]
            };
        })
        .directive('validFile', function () {
            return {
                require: 'ngModel',
                link: function (scope, el, attrs, ngModel) {
                    //change event is fired when file is selected
                    el.bind('change', function () {
                        scope.$apply(function () {
                            ngModel.$setViewValue(el.val());
                            ngModel.$render();
                        });
                    });
                }
            }
        })

        myApp.controller('LoadXMLCtrl', function ($scope, $rootScope, $filter, NetworkService) {
            $scope.Assignment = {};
            $scope.AssignmentListAll = [];
            NetworkService.get('PraescioCommon/GetAssignmentListDropDown?AssignmentType=@ViewBag.AssignmentType').success(function (data) {
                $scope.AssignmentListAll = data.dataContent;
                console.log(data);
            });

            var formdata = new FormData();
            $scope.getTheFiles = function ($files) {
                $scope.isDisplay = true;
                if ($files.length != 0)
                    $scope.FileUpload = [];
                for (var i = 0; i < $files.length; i++) {
                    $scope.FileUpload.push({ FileName: $files[i].name, ContentType: $files[i].type, Size: $files[i].size });
                }
                $scope.isDisplay = true;
                angular.forEach($files, function (value, key) {
                    formdata.append(0, value);
                });

            };

            $scope.selectedFile = null;
            $scope.msg = "";

            $scope.StandardList = [{ Id: 1, StandardName: '5th' }, { Id: 2, StandardName: '6th' }, { Id: 3, StandardName: '7th' },
                               { Id: 4, StandardName: '8th' }, { Id: 5, StandardName: '9th' }, { Id: 6, StandardName: '10th' }]

            $scope.VersionType = [{ Id: 1, Name: 'Paid' }, { Id: 2, Name: 'Trail' }];

            NetworkService.get('PraescioAdmin/GetBoardList').success(function (data) {
                $scope.BoardList = data;
            });


            NetworkService.get('PraescioAdmin/GetAssignmentTeacherList?institutionId=@Praescio.Models.Common.ACCOUNT.OrganizationAccount.InstitutionAccountId').success(function (data) {
                console.log(data);
                $scope.TeacherList = data;
            });

            NetworkService.get('PraescioAdmin/GetMedium').success(function (data) {
                $scope.MediumList = data;
            });

            $scope.ChangeBoard = function (boardname) {
                if (boardname > 1) {
                    $scope.Assignment.MediumId = 1;
                }
            }

            $scope.ChangeStandard = function (id) {
                NetworkService.get('PraescioCommon/GetSubject?standardid=' + id + '&mediumid=' + $scope.Assignment.MediumId).success(function (data) {
                    $scope.SubjectList = data;
                });
            }

            $scope.ChangeSubject = function (id) {
                $scope.ChangeAssignmentList();
            }

            $scope.ChangeAssignmentList = function (id) {
                console.log('$scope.Assignment', $scope.Assignment)
                console.log('$scope.AssignmentList', $scope.AssignmentList)
                $scope.AssignmentList = $scope.AssignmentListAll.filter(m => m.SubjectId == $scope.Assignment.SubjectId);
                console.log('$scope.AssignmentList', $scope.AssignmentList)
            }

            $scope.ChangeAssignment = function (id) {
                NetworkService.get('PraescioCommon/GetAssignmentDetail?assignmentid='+id).success(function (data) {
                    $scope.Assignment = data.Assignment;
                    $scope.ChangeStandard(data.Assignment.StandardId);

                });
            }

            $scope.loadFile = function (files) {

                $scope.$apply(function () {

                    $scope.selectedFile = files[0];

                })

            }

            $scope.SaveXML = function () {
                var file = $scope.selectedFile;

                if (file) {

                    var reader = new FileReader();

                    reader.onload = function (e) {

                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });

                        var first_sheet_name = workbook.SheetNames[0];
                        var secound_sheet_name = workbook.SheetNames[1];

                        var sheet1 = XLSX.utils.sheet_to_json(workbook.Sheets[first_sheet_name]);
                        var sheet2 = XLSX.utils.sheet_to_json(workbook.Sheets[secound_sheet_name]);

                        var QuestionViewModel = [];

                        NetworkService.UploadFiles('@Url.Content("~/PraescioAdmin/SaveFile")', formdata).then(function (response) {
                            $scope.QuestionExcelLocation = response.data.filelocation;

                            for (var i = 0; i < sheet1.length; i++) {
                                var questiondata = $.grep(sheet2, function (element) { return element.QuestionId == sheet1[i].QuestionId; })
                                sheet1[i].AssignmentId = $scope.Assignment.AssignmentId;
                                sheet1[i].QuestionTypeId = QuestionType[sheet1[i].QuestionType];
                                QuestionViewModel.push({ "Question": sheet1[i], "QuestionOption": questiondata });
                            }

                            console.log(QuestionViewModel);
                            NetworkService.insert('PraescioCommon/SaveXMLQuestion?uploadFileLocation=' + $scope.QuestionExcelLocation, JSON.stringify(QuestionViewModel)).success(function (data) {

                                if (data.isAlreadyExist == true) {
                                    swal({
                                        title: "Assignment have been already loaded, Do you want to override",
                                        text: "You will not be able to recover this imaginary file!",
                                        type: "warning",
                                        showCancelButton: true,
                                        confirmButtonClass: "btn-danger",
                                        confirmButtonText: "Yes, override it!",
                                        cancelButtonText: "No, cancel plx!",
                                        closeOnConfirm: false,
                                        closeOnCancel: true
                                    }, function (isConfirm) {
                                        if (isConfirm) {
                                            NetworkService.insert('PraescioCommon/SaveXMLQuestion?uploadFileLocation=' + $scope.QuestionExcelLocation + '&overrideFile=true', JSON.stringify(QuestionViewModel)).success(function (data) {
                                                swal({
                                                    title: "Assignment has been uploaded successfully!!!",
                                                    text: "Press Ok to Continue.",
                                                    type: "success",
                                                    confirmButtonColor: "green",
                                                    showCancelButton: false,
                                                });
                                            });
                                            //swal("Deleted!", "Your imaginary file has been deleted.", "success");
                                        } else {
                                            //swal("Cancelled", "Your imaginary file is safe :)", "error");
                                        }
                                    });
                                } else {

                                    swal({
                                        title: "Assignment has been uploaded successfully!!!",
                                        text: "Press Ok to Continue.",
                                        type: "success",
                                        confirmButtonColor: "green",
                                        showCancelButton: false,
                                    });
                                }
                            }).error(function (data, status) {
                                $scope.messages = data || "Request failed";
                                $scope.status = status;
                                console.log(data);
                                console.log(status);
                            });;

                            
                        });
                    }

                    reader.onerror = function (ex) {

                    }

                    reader.readAsBinaryString(file);
                }
            }


        });
    </script>
}