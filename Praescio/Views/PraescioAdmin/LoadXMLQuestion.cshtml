@{
    ViewBag.Title = "School";
}

<div class="right_col" role="main" ng-controller="LoadXMLCtrl">
    <div class="">

        <div class="page-title">
            <div class="title_left">
                <h3>Dashboard</h3>
            </div>
            <div class="title_right">
                <div class="col-md-6 col-sm-6 col-xs-12 form-group pull-right top_search">
                    <div class="input-group">
                        <ol class="breadcrumb">
                            <li><a href="@Url.Action("Dashboard", "PraescioAdmin")"><i class="fa fa-dashboard"></i> Dashboard</a></li>
                            <li class="active">School Registration</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
        <div class="row">
            <div class="col-md-6 col-xs-12">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>School Registration</h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        <!-- start form for validation -->
                        <form id="SchoolForm" name="SchoolForm" data-parsley-validate>
                            <div class="form-group">
                                <label for="schoolname">School Name</label>
                                <input type="text" id="fullname" ng-model="Institution.InstitutionName" class="form-control" name="fullname" placeholder="School Name" required />
                            </div>
                            <div class="form-group">
                                <label for="regno">Save XML Question</label>
                                @*<input id="file1" ng-model="file" valid-file name="file" ng-required="false" type="file" multiple ng-files="getTheFiles($files)" />*@
                                <input type="file" name="file" class="form-control"
                                       onchange="angular.element(this).scope().loadFile(this.files)" />
                            </div>

                            <br />
                            @*<span class="btn btn-primary">Reset</span>*@
                            <span class="btn btn-primary" ng-click="SaveXML()">Submit</span>
                        </form>
                        <!-- end form for validations -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.1/xlsx.full.min.js"></script>
    <script src="http://oss.sheetjs.com/js-xlsx/jszip.js"></script>

    <script type="text/javascript">
        myApp.directive('ngFiles', ['$parse', function ($parse) {
            function fn_link(scope, element, attrs) {
                var onChange = $parse(attrs.ngFiles);
                element.on('change', function (event) {
                    onChange(scope, { $files: event.target.files });
                });
            };

            return {
                link: fn_link
            }
        }])
        .directive('ngInitial', function () {
            return {
                restrict: 'A',
                controller: [
                  '$scope', '$element', '$attrs', '$parse', function ($scope, $element, $attrs, $parse) {
                      var getter, setter, val;
                      val = $attrs.ngInitial || $attrs.value;
                      getter = $parse($attrs.ngModel);
                      setter = getter.assign;
                      setter($scope, val);
                  }
                ]
            };
        })
        .directive('validFile', function () {
            return {
                require: 'ngModel',
                link: function (scope, el, attrs, ngModel) {
                    el.bind('change', function () {
                        scope.$apply(function () {
                            ngModel.$setViewValue(el.val());
                            ngModel.$render();
                        });
                    });
                }
            }
        })

        myApp.controller('LoadXMLCtrl', function ($scope, $rootScope, $filter, NetworkService) {
            var formdata = new FormData();
            $scope.getTheFiles = function ($files) {
                $scope.isDisplay = true;
                if ($files.length != 0)
                    $scope.FileUpload = [];
                for (var i = 0; i < $files.length; i++) {
                    $scope.FileUpload.push({ FileName: $files[i].name, ContentType: $files[i].type, Size: $files[i].size });
                }
                $scope.isDisplay = true;
                angular.forEach($files, function (value, key) {
                    formdata.append(0, value);
                });

            };

            $scope.selectedFile = null;
            $scope.msg = "";


            $scope.loadFile = function (files) {

                $scope.$apply(function () {

                    $scope.selectedFile = files[0];

                })

            }

            $scope.SaveXML = function () {
                var file = $scope.selectedFile;

                if (file) {

                    var reader = new FileReader();

                    reader.onload = function (e) {

                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });

                        var first_sheet_name = workbook.SheetNames[0];
                        var secound_sheet_name = workbook.SheetNames[1];

                        var sheet1 = XLSX.utils.sheet_to_json(workbook.Sheets[first_sheet_name]);
                        var sheet2 = XLSX.utils.sheet_to_json(workbook.Sheets[secound_sheet_name]);

                        var QuestionViewModel = [];

                        for (var i = 0; i < sheet1.length; i++) {
                            var questiondata = $.grep(sheet2, function (element) { return element.QuestionId == sheet1[i].QuestionId; })
                            QuestionViewModel.push({ "Question": sheet1[i], "QuestionOption": questiondata });
                        }

                        NetworkService.insert('Admin/SaveXMLQuestion', JSON.stringify(QuestionViewModel)).success(function (data) {
                            console.log('success');
                        }).error(function (data, status) {
                            $scope.messages = data || "Request failed";
                            $scope.status = status;
                            console.log(data);
                            console.log(status);
                        });;
                    }

                    reader.onerror = function (ex) {

                    }

                    reader.readAsBinaryString(file);
                }
            }


        });
    </script>
}


